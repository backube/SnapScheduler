---
# yamllint disable rule:line-length

name: Tests
on:  # yamllint disable-line rule:truthy
  push:
  pull_request:
  schedule:
    - cron: "15 6 * * 1"  # 6:15 every Monday

env:
  GO_VERSION: "1.13"
  HELM_VERSION: "3.2.0"
  KIND_VERSION: "0.7.0"
  OPERATOR_SDK_VERSION: "0.15.1"
  GOLANGCI_VERSION: "1.25.0"
  GO111MODULE: "on"
  IMAGE: "quay.io/backube/snapscheduler"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Install prereqs
        run: |
          echo 'APT::Acquire::Retries "5";' | sudo tee /etc/apt/apt.conf.d/80-retries
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y python-pip ruby
          sudo gem install asciidoctor mdl
          sudo pip install yamllint

      - name: Run linters
        run: ./.ci-scripts/pre-commit.sh --require-all

  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install Helm
        run: |
          curl -fL 'https://raw.githubusercontent.com/helm/helm/master/scripts/get' | bash -s -- --version v${HELM_VERSION}
          helm version
          helm version | grep -q "${HELM_VERSION}"

      - name: Install GolangCI-Lint
        run: |
          curl -fL 'https://install.goreleaser.com/github.com/golangci/golangci-lint.sh' | sudo sh -s -- -b /usr/local/bin "v${GOLANGCI_VERSION}"
          golangci-lint version
          golangci-lint version |& grep -q "${GOLANGCI_VERSION}"

      - name: Install operator-sdk
        run: |
          curl -fL -o /tmp/operator-sdk "https://github.com/operator-framework/operator-sdk/releases/download/v${OPERATOR_SDK_VERSION}/operator-sdk-v${OPERATOR_SDK_VERSION}-x86_64-linux-gnu"
          sudo install /tmp/operator-sdk /usr/local/bin && rm -f /tmp/operator-sdk
          operator-sdk version
          operator-sdk version | grep -q "${OPERATOR_SDK_VERSION}"

      - name: Download modules
        run: go mod download

      - name: Lint
        run: make lint

      - name: Build operator container
        run: make image

      - name: Export container image
        run: docker save -o /tmp/image.tar ${IMAGE}

      - name: Save container as artifact
        uses: actions/upload-artifact@v1
        with:
          name: container
          path: /tmp/image.tar

      - name: Calculate test coverage
        run: make coverage.txt

      - name: Upload coverage
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage.txt
          yml: .codecov.yml

  e2e:
    name: End-to-end
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # There must be kindest/node images for these versions
        # See: https://hub.docker.com/r/kindest/node/tags?page=1&ordering=name
        KUBERNETES_VERSIONS: ["1.13.12", "1.14.10", "1.15.7", "1.16.4", "1.17.0", "1.18.0"]

    env:
      KUBECONFIG: /tmp/kubeconfig
      KUBERNETES_VERSION: ${{ matrix.KUBERNETES_VERSIONS }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Install Helm
        run: |
          curl -fL 'https://raw.githubusercontent.com/helm/helm/master/scripts/get' | bash -s -- --version v${HELM_VERSION}
          helm version
          helm version | grep -q "${HELM_VERSION}"

      - name: Install kubectl
        run: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/v${KUBERNETES_VERSION}/bin/linux/amd64/kubectl"
          sudo install ./kubectl /usr/local/bin/
          kubectl version --short --client
          kubectl version --short --client | grep -q ${KUBERNETES_VERSION}

      - name: Install kind
        run: |
          curl -L -o kind https://github.com/kubernetes-sigs/kind/releases/download/v${KIND_VERSION}/kind-linux-amd64
          sudo install ./kind /usr/local/bin && rm kind
          kind version
          kind version | grep -q ${KIND_VERSION}

      - name: Create Kubernetes cluster
        run: |
          ./hack/setup-kind-cluster.sh "${KUBERNETES_VERSION}"

      - name: Load container artifact
        uses: actions/download-artifact@v1
        with:
          name: container
          path: /tmp

      - name: Import container image
        run: |
          docker load -i /tmp/image.tar
          docker inspect ${IMAGE}

      - name: Insert operator image into cluster
        run: kind load docker-image "${IMAGE}"

      - name: Start operator
        run: |
          kubectl create ns backube-snapscheduler
          helm install -n backube-snapscheduler --set image.tagOverride=latest snapscheduler ./helm/snapscheduler

      - name: Verify snapscheduler is running
        run: kubectl -n backube-snapscheduler wait --for condition=Available --timeout 60s deploy/snapscheduler

      - name: Run e2e tests
        run: ./.ci-scripts/tests/test-sdk-e2e.sh

  push:
    name: Push container to registry
    needs: [build, e2e]
    if: >
      (github.event_name == 'push' || github.event_name == 'schedule') &&
      (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest

    steps:
      - name: Load container artifact
        uses: actions/download-artifact@v1
        with:
          name: container
          path: /tmp

      - name: Import container image
        run: |
          docker load -i /tmp/image.tar
          docker inspect ${IMAGE}

      - name: Login to registry
        # If the registry server is specified in the image name, we use that.
        # If the server isn't in the image name, default to docker.io
        run: |
          [[ "${IMAGE}" =~ ^([^/]+)/[^/]+/[^/]+ ]] && REGISTRY="${BASH_REMATCH[1]}" || REGISTRY="docker.io"
          echo "Attempting docker login to: ${REGISTRY}"
          echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin ${REGISTRY}

      - name: Push to registry (latest)
        if: >
          (github.event_name == 'push' || github.event_name == 'schedule') &&
          github.ref == 'refs/heads/master'
        run: |
          docker push "${IMAGE}"

      - name: Push to registry (version tag)
        if: >
          (github.event_name == 'push' || github.event_name == 'schedule') &&
          startsWith(github.ref, 'refs/tags/v')
        run: |
          [[ "${{ github.ref }}" =~ ^refs/tags/v([0-9]+\..*) ]] || exit 0
          TAG="${BASH_REMATCH[1]}"
          echo "Pushing to $TAG"
          docker tag "${IMAGE}" "${IMAGE}:${TAG}"
          docker push "${IMAGE}:${TAG}"
